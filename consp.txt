CI (Continuous Integration) и CD (Continuous Deployment или Continuous Delivery) — это практики, предназначенные для автоматизации этапов разработки программного обеспечения, что позволяет более быстро и безопасно поставлять обновления и новые функции.


CI (Не прерывающая интеграция): Включает в себя регулярное объединение изменений кода, которые разработчики загружают в общие репозитории, и автоматическое тестирование каждого изменения. Это помогает избежать конфликтов при объединении кода и позволяет обнаруживать ошибки на раннем этапе.


Пример: Каждый раз, когда разработчик отправляет изменения в репозиторий, автоматически запускаются юнит-тесты и интеграционные тесты, проверяющие работоспособность кода.


CD (Не прерывающее развертывание): Это этап, следующий за CI, когда изменения автоматически развертываются на различные среды (например, тестовые, стейджинг и продакшн). Различают два подхода:

Continuous Delivery: Код всегда готов к релизу, но требует ручного развертывания.

Continuous Deployment: Изменения автоматически развертываются на продакшен-серверы при успешном прохождении тестов.


Пример: После успешной проверки кода на стейджинг-сервере, изменения автоматически отправляются на продакшен.

Зачем это нужно?


CI/CD сокращает время выхода продукта на рынок, снижает вероятность ошибок и позволяет командам сосредоточиться на результате, а не на поддержке процессов. Это приводит к повышению доверия и удовлетворенности пользователей.

Что такое Докер?


Docker — это платформа для разработки, доставки и запуска приложений в контейнерах. Она позволяет разработчикам упаковывать приложения с их зависимостями в виртуализированную среду, так называемую "контейнер". Контейнеры изолированы друг от друга и работают на одном экземпляре операционной системы.

Что такое контейнеризация?


Контейнеризация — это процесс упаковки приложения с его средой выполнения (библиотеки, зависимости) в контейнер, что позволяет обеспечить взаимозаменяемость и переносимость приложения на различных средах (локальные, облачные и пр). Основные преимущества контейнеризации:


Легкая развертываемость.

Эффективное использование ресурсов.

Устранение конфликта зависимостей.


Что такое Jenkins?


Jenkins — это инструмент автоматизации, который помогает в реализации CI/CD. Он управляет процессами сборки, тестирования и развертывания программного обеспечения, предоставляя интерфейс для настройки различных этапов девопс-процесса с помощью различных плагинов.

Какие Envs вы знаете?


Envs (или среды) — это среды, в которых работает приложение. Некоторые из распространенных сред:


Local (Локальная): среда разработчика.

Development (Разработка): среда для разработки команды.

Testing (Тестирование): среда для QA.

Staging (Предпроизводственная): среда для финального тестирования перед продакшеном.

Production (Продакшен): окончательная рабочая среда.


Что делать, если ошибка появляется в локальной среде, но не появляется в dev/test?



Проверить конфигурации: Убедиться, что конфигурации локальной среды соответствуют dev/test.

Логи: Посмотреть логи приложения для выявления проблемы.

Данные: Проверить данные, используемые в локальной среде, возможно, они отличаются.

Версии зависимостей: Убедиться, что все зависимости имеют одинаковые версии.


Что делать, если ошибка появляется в среде разработки/тестирования, но не появляется в локальной среде?



Логи: Анализировать логи на dev/test среде.

Сравнение: Сравнить конфигурации и данные между средами.

Процесс развертывания: Убедиться, что развертывание прошло успешно без ошибок.

Версии зависимостей: Проверить, совпадают ли версии библиотек и инструментов.


Что делать, если вы находитесь в той же ветке, но разработчик не может воспроизвести эту проблему?



Сбор информации: Собрать дополнительную информацию о среде и системе разработчика.

Шаги воспроизведения: Предоставить четкие шаги для воспроизведения проблемы.

Конфигурация: Убедиться, что у разработчика такая же конфигурация, как у вас.

Сравнение окружений: Проверить, на каких операционных системах тестируют обе стороны.


У тебя есть веб-сайт, который управляется через CMS. Админ через CMS создает новую статью, но статья не появляется на сайте. Что будешь делать как тестировщик?



Проверить логи CMS: Посмотреть логи ошибок, чтобы убедиться, что нет проблем при создании статьи.

Проверить кеш: Очистить кеш сайта, если он используется.

Проверить права пользователя: Убедиться, что администратор имеет необходимые права для публикации статей.

Сравнить состояния: Убедиться, что статья действительно опубликована, а не сохранена как черновик.


У тебя есть админка для управления статусами пользователей. Ты админ, меняешь статус пользователю, а его права не поменялись. Что будешь делать как тестировщик?



Проверить логи: Изучить логи действий в админке на предмет ошибок.

Проверить зависимости: Убедиться, что изменение статуса действительно влияет на права пользователя.

Проверить настройки прав: Убедиться, что изменения статуса корректно обрабатываются системой.

Повторить изменения: Попробовать изменить статус и проследить за изменениями прав еще раз.


У тебя есть сервер, который раздает клиентам рекламные баннеры. Саппорт одного из клиентов сообщил, что один из рекламных баннеров не отображается на его клиентской веб-части. Что будешь делать как тестировщик?



Проверить логи сервера: Убедиться, что нет ошибок при запросе баннера.

Проверить настройки клиента: Убедиться в правильности интеграции и настройки отображения баннеров.

Проверить условия показа: Убедиться, что условия показа баннера выполнены (например, сегментация пользователей).

Проверить кэш: Убедиться, что кэш клиента обновлен.


Разработчики выкатили новую версию мобильного приложения, как будете проверять? Что будешь делать как тестировщик?



Регрессионное тестирование: Проверить все основные функции приложения.

Тестирование новых функций: Тщательно протестировать нововведения.

Тестирование производительности: Оценить время загрузки и общее реагирование приложения.

Тестирование на разных устройствах: Проверить приложение на различных устройствах и версиях ОС.


При регистрации в нашей системе пользователь должен получать статус - гость, а получает статус Developer. В чем проблема? Что будешь делать как тестировщик?



Проверка логики регистрации: Анализировать процесс регистрации и настройки статусов.

Логи: Посмотреть логи ошибок регистрации, чтобы найти возможные сбои.

Проверка данных: Подтвердить, что пользователи, регистрирующиеся, действительно попадают в правильные группы.

Кейс для тестирования: Провести тесты по всем возможным сценариям регистрации.


Пользователь сообщил, что при загрузке фотографии в профиль пользователя вместо его аватара отображается стандартная заглушка-картинка. Что будешь делать как тестировщик?



Проверка формата: Убедиться, что загружаемая фотография имеет допустимый формат.

Логи: Проанализировать журналы ошибок на сервере.

Кэш: Очистить кэш для обновления отображаемых данных.

Тестирование: Протестировать загрузку разных изображений.


При сортировке товаров по возрастанию цены, сортировка на клиенте не происходит. Что будешь делать как тестировщик?



Проверить запрос: Убедиться, что запрос к серверу для сортировки формируется корректно.

Логи: Проанализировать логи сервера для выявления проблем при обработке запроса.

Тестирование: Провести тесты сортировки с разными набором данных.

Проверить на разных устройствах: Убедиться в наличии проблемы на других устройствах или браузерах.


В клиент-банке пользователю не отображается баланс его счёта. Что будешь делать как тестировщик?



Проверить данные: Убедиться, что у пользователя действительно есть активный счет.

Логи: Анализировать логи для выявления ошибок при получении баланса.

Проверить конфигурацию: Убедиться, что все системы настроены правильно.

Повторные тесты: Выполнить повторные тесты с другими пользователями.


В клиент-банке пользователю отображается баланс 0, хотя деньги он положил еще вчера. Что будешь делать как тестировщик?



Проверить операцию: Убедиться, что транзакция корректно записана в систему.

Логи: Изучить логи для выявления возможных ошибочных операций.

Проверка кеша: Убедиться, что данные актуальны и не загружаются из кэша.

Анализ аккаунта: Проверить настройки пользователя и его транзакции.


При отправке сообщения в мессенджере, получатель получает пуш, но в личной переписке сообщения нету. Что будешь делать как тестировщик?



Логи: Проверить логи отправки и получения сообщения.

Проверить процесс: Проанализировать, как осуществляется отправка и сохранения сообщений.

Тестирование: Провести тесты на повторную отправку сообщений.

Проверка кеша: Исследовать вопрос с отображением в клиенте.


Пользователь зарегистрировался, но не может залогиниться. Что будешь делать как тестировщик?



Проверить данные: Убедиться, что введенный логин и пароль верны.

Проверка системы на наличие ошибок: Проанализировать логи системы для выявления возможных ошибок.

Тестирование: Попробовать создать нового пользователя и войти под его учетной записью.

Проверка блокировок: Убедиться, что аккаунт не заблокирован.


Сделать чеклист всех своих действий, чтобы было проще подготовиться к собесу.


Чеклист к собеседованию:



Изучение компании:



Основные продукты и услуги.

Миссия и ценности компании.



Подготовка к интервью:



Изучение часто задаваемых вопросов.

Подготовка своих вопросов.



Подготовка резюме:



Убедиться, что резюме актуально и полно.

Подготовить примеры для ответов на вопросы.



Практика собеседования:



Пройтись по своим ответам с другом или перед зеркалом.

Подготовить примеры из опыта работы для демонстрации навыков.



Техническая подготовка:



Повторить основные концепции, инструменты и технологии.

Подготовиться к практическим заданиям (если они предусмотрены).



Этикет интервью:



Подходить вовремя.

Прийти в подходящей одежде.



После собеседования:



Отправить благодарственное сообщение интервьюеру.

Проанализировать свой опыт и подготовиться к следующему интервью, если будет отказ.
